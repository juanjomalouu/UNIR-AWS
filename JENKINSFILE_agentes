BASE_URL = ""
pipeline {
    agent any
    stages {
        stage('Get Code') {
            steps {
                // Obtener código del repo
                git branch: 'develop', url: 'https://github.com/juanjomalouu/UNIR-AWS'
                sh 'dir'
                sh 'whoami'
                sh 'hostname'
                echo WORKSPACE
                stash name: 'samconfig', includes 'samconfig.toml'
                dir('configRepository'){
                    git branch: 'staging', url: 'https://github.com/juanjomalouu/todo-list-aws-config'
                }
                
                sh 'cp configRepository/samconfig.toml .'
                
                stash name: 'code', includes: '**'
            }
        }
        
        stage('Static Test') {
            agent { label 'Node1' }
            steps {
                println "=========================================== FLAKE8 ==========================================="
                unstash 'code'
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    
                      sh 'whoami'
                      sh 'hostname'
                      sh '''
                        dir
                        ls -l /home/ubuntu/.local/bin/flake8
                        export PATH=$PATH:/home/ubuntu/.local/bin
                        flake8 --exit-zero --format=pylint src
                    '''
                    recordIssues( 
                        tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], 
                        qualityGates: [], 
                        ignoreQualityGate: true
                    )
                }
                println "=========================================== BANDIT ==========================================="
                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                    sh '''
                        dir
                        ls -l /home/ubuntu/.local/bin/flake8
                        export PATH=/home/ubuntu/.local/bin
                        bandit --exit-zero -r src -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                    '''
                    recordIssues(
                        tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], 
                        qualityGates: [],
                        ignoreQualityGate: true
                    )
                }
            }
        }
        stage('Deploy')
        {
            steps
            {
                script
                {
                    def validateResult = sh(script: 'sam validate --region us-east-1', returnStatus: true)
                    if (validateResult == 0) {
                        echo 'Template válido'
                                
                        sh 'whoami'
                        sh 'hostname'
                        sh '''
                            sam build
                            sam deploy --config-file samconfig.toml --config-env staging --force-upload --no-fail-on-empty-changeset
                        '''
                        BASE_URL = sh(script: "aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query \"Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue\" --output text", returnStdout: true).trim()
                        echo "BASE_URL: ${BASE_URL}"
                    }
                    else
                    {
                        error 'Fallo en la validación.'
                    }
                }
            }
        }
        
        stage('Rest Test')
        {
            agent { label 'Node2' }
            steps
            {
                script {
                    withEnv(["BASE_URL=${BASE_URL}"])
                    {
                        unstash 'code'
                                
                        sh 'whoami'
                        sh 'hostname'
                        sh '''
                            echo hola
                            export PATH=/home/ubuntu/.local/bin
                            pytest test/integration/todoApiTest.py -v
                        '''
                    }
                }
            }
        }
        
        stage('Promote')
        {
            //Marcar version como Release
            steps
            {
                withCredentials([string(credentialsId: 'GIT_PAT', variable: 'GIT_PAT')]) {   
                    unstash 'samconfig'
                    sh 'whoami'
                    sh 'hostname'
                    sh '''
                        git config --global user.email "abadjuanjo@hotmail.com"
                        git config --global user.name "juanjomalouu"
                        git config --global merge.ours.driver true
                        git config pull.rebase false
                        git remote set-url origin https://juanjomalouu:${GIT_PAT}@github.com/juanjomalouu/UNIR-AWS.git
                        git checkout master
                        
                        git pull origin master
                        
                        git merge --no-ff develop -m "Promoting develop to master"
                        git push origin master
                    '''
                }
            }
        }
    }
}
